from flask import Flask, render_template, request, jsonify, session
from WorldJson import WorldCircleColumnDataSource
from elasticsearch import Elasticsearch
import pandas as pd
from geopy.geocoders import Nominatim
from WorldBaseTest import World
from color_codes import gradient
import numpy as np
from flask import g
from scipy.spatial import ConvexHull
import matplotlib.pyplot as plt
key = 'AIzaSyCl9gfvmpQoyisgz-lt1epZkU5iVMaoLM0'
app = Flask(__name__)
from concave_hull import alpha_shape
app.secret_key = key

restaurant_data_AU = pd.read_csv("C:/Users/atrivedy/Documents/proj/AU.txt",sep="\t")
restaurant_data_BR = pd.read_csv("C:/Users/atrivedy/Documents/proj/BR.txt",sep="\t")
restaurant_data_CN = pd.read_csv("C:/Users/atrivedy/Documents/proj/CN.txt",sep="\t")
restaurant_data_FR = pd.read_csv("C:/Users/atrivedy/Documents/proj/FR.txt",sep="\t")
restaurant_data_US = pd.read_csv("C:/Users/atrivedy/Documents/proj/US.txt",sep="\t")


@app.route("/")
def jsonWorld():
    session['searchbody_session'] =  {  # default search P1
        "size": 1000,
        "query": {
            "term": {
                "error": 5
            }
        }
    }
    session['errorcode_session'] = 1
    with World() as world:
        script1, div1 = world.returnFigureComponents()
        return render_template("WorldJson.html", script=script1, div=div1)


stored_coordinates = {}


@app.route('/circleAsCDS')
def worldJsonWithCircleCds():
    with WorldCircleColumnDataSource() as world:
        script, div = world.returnFigureComponents()
        return render_template("WorldJson.html", script=script, div=div)


@app.route('/storesCDS/', methods=['GET','POST'])
def post_data_storesCDS():
    es = Elasticsearch()
    variable = {'x': [], 'y': [],'nsn':[],'addressline':[], 'name': [], 'time': [], 'color': [], 'ISO2':[]}
    prioritycolors = {}
    # red yellow fuchsia aqua
    prioritycolors[1] = "blue"
    prioritycolors[2] = "blue"
    prioritycolors[3] = 'blue'
    prioritycolors[4] = 'blue'
   # global errorcode
    if request.method == 'GET':
        errorcode = request.args.get('d')
    #    global searchbody
        # if errorcode == '1':
        searchbody = {
            "size": 1000,
            "query": {
                "term": {
                    "error": int(errorcode)
                }
            }
        }
        response = es.search(index="stores_ecp", body=searchbody,request_timeout=30)
        if response["hits"]["total"] >= 1:
            for hit in response['hits']['hits']:
                #variable['x'].append(float(restaurant_data.loc[restaurant_data['NatlStrNumber'] == int(hit['_source']['nsn'])]['Longitude']))
                #variable['y'].append(float(restaurant_data.loc[restaurant_data['NatlStrNumber'] == int(hit['_source']['nsn'])]['Latitude']))
                if hit['_source']['ISO2'] == 'AU':
                    variable['ISO2'].append('AU')
                    variable['x'].append(float(
                        restaurant_data_AU.loc[restaurant_data_AU['NatlStrNumber'] == int(hit['_source']['nsn'])][
                            'Longitude']))
                    variable['y'].append(float(
                        restaurant_data_AU.loc[restaurant_data_AU['NatlStrNumber'] == int(hit['_source']['nsn'])][
                            'Latitude']))
                elif hit['_source']['ISO2'] == 'BR':
                    variable['ISO2'].append('BR')
                    variable['x'].append(float(
                        restaurant_data_BR.loc[restaurant_data_BR['NatlStrNumber'] == int(hit['_source']['nsn'])][
                            'Longitude']))
                    variable['y'].append(float(
                        restaurant_data_BR.loc[restaurant_data_BR['NatlStrNumber'] == int(hit['_source']['nsn'])][
                            'Latitude']))
                elif hit['_source']['ISO2'] == 'CN':
                    variable['ISO2'].append('CN')
                    variable['x'].append(float(
                        restaurant_data_CN.loc[restaurant_data_CN['NatlStrNumber'] == int(hit['_source']['nsn'])][
                            'Longitude']))
                    variable['y'].append(float(
                        restaurant_data_CN.loc[restaurant_data_CN['NatlStrNumber'] == int(hit['_source']['nsn'])][
                            'Latitude']))
                elif hit['_source']['ISO2'] == 'FR':
                    variable['ISO2'].append('FR')
                    variable['x'].append(float(
                        restaurant_data_FR.loc[restaurant_data_FR['NatlStrNumber'] == int(hit['_source']['nsn'])][
                            'Longitude']))
                    variable['y'].append(float(
                        restaurant_data_FR.loc[restaurant_data_FR['NatlStrNumber'] == int(hit['_source']['nsn'])][
                            'Latitude']))
                elif hit['_source']['ISO2'] == 'US':
                    variable['ISO2'].append('US')
                    variable['x'].append(float(
                        restaurant_data_US.loc[restaurant_data_US['NatlStrNumber'] == int(hit['_source']['nsn'])][
                            'Longitude']))
                    variable['y'].append(float(
                        restaurant_data_US.loc[restaurant_data_US['NatlStrNumber'] == int(hit['_source']['nsn'])][
                            'Latitude']))

                variable['name'].append(hit['_source']['name'])
                variable['time'].append(hit['_source']['timestamp'])
                variable['color'].append(prioritycolors[int(errorcode)])
                variable['nsn'].append(hit['_source']['nsn'])
                variable['addressline'].append(hit['_source']['addressline'])

        return jsonify(variable)
    if request.method == 'POST':
        concave_hull_column_data_source = []
        data = request.json
        ctr = {}
        for nsn in data['nsn']:
            try:
                region_name = list(restaurant_data_US.loc[restaurant_data_US['NatlStrNumber'] == int(nsn)]['Region'])[0]
                x = list(restaurant_data_US.loc[restaurant_data_US['NatlStrNumber'] == int(nsn)]['Longitude'])[0]
                y = list(restaurant_data_US.loc[restaurant_data_US['NatlStrNumber'] == int(nsn)]['Latitude'])[0]
                ctr[region_name]['count'] += 1
                ctr[region_name]['xy_coord'].append((x, y))

            except:
                region_name = list(restaurant_data_US.loc[restaurant_data_US['NatlStrNumber'] == int(nsn)]['Region'])[0]
                x = list(restaurant_data_US.loc[restaurant_data_US['NatlStrNumber'] == int(nsn)]['Latitude'])[0]
                y = list(restaurant_data_US.loc[restaurant_data_US['NatlStrNumber'] == int(nsn)]['Longitude'])[0]
                ctr[region_name] = {'count':1,
                                    'xy_coord':[(x,y)],
                                    'COLOR':''}
        USRegions_data = dict(x=[], y=[], COLOR=[])
        N_COLOR = 19
        '''
        for _region in ctr:

            if ctr[_region]['count'] >=3:
                points = np.array(ctr[_region]['xy_coord'])
                hull = ConvexHull(points)
                hull_pts = points[hull.vertices, :]
                print(hull_pts)
                #list_x = list(points[hull_pts, 0])
                #list_y = list(points[hull_pts, 1])
                list_x = list(hull_pts[:, 0])

                list_y = list(hull_pts[:, 1])

                #list_x.append(points[hull_pts[0], 0])
                #list_y.append(points[hull_pts[0], 1])
                print(list_x)
                print(list_y)
                USRegions_data['x'].append(list(list_x))
                USRegions_data['y'].append(list(list_y))
                USRegions_data['COLOR'].append(gradient[N_COLOR])


                #USRegions_data['x'].append((points[hull.vertices[0], 0]))
               # USRegions_data['y'].append((points[hull.vertices[0], 1]))
                #USRegions_data['COLOR'].append(gradient[N_COLOR])
                N_COLOR -= 1
            '''
        print(ctr['CHICAGO REGION']['xy_coord'])
        _keys = list(ctr.keys())
        _keys = _keys.sort(reverse=True)
        if ctr[_region]['count'] >= 4:
            points = np.array(ctr[_region]['xy_coord'])
            concave_hull, edge_points = alpha_shape(points,alpha=0.1)
            list_x, list_y = concave_hull.exterior.coords.xy
            USRegions_data['x'].append(list(list_x))
            USRegions_data['y'].append(list(list_y))
            USRegions_data['COLOR'].append(gradient[N_COLOR])
            N_COLOR -= 1

        print("code 0")

        return jsonify(USRegions_data)

@app.teardown_appcontext
def initialize(obj):
    print("teardown")


@app.route('/popup')
def popup_template():
    return render_template("popup.html")


if __name__ == '__main__':
    app.run(debug=False)
